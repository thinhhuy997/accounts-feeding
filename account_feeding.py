# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tds2.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QFileDialog, QPushButton, QMenu, QAction, QMessageBox, QDialog, QVBoxLayout
from PyQt5.QtCore import QFile, QTextStream, QThreadPool, QJsonDocument
from PyQt5 import QtCore
from PyQt5.QtCore import Qt
import threading
import requests
from facebook import SeleniumWorker
import time
from traodoisub import Traodoisub
from PyQt5.QtGui import QPixmap
from pathlib import Path
import json
import os
from proxy_chrome_driver import get_chromedriver

class PasswordDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super().initStyleOption(option, index)
        style = option.widget.style() or QtWidgets.QApplication.style()
        hint = style.styleHint(QtWidgets.QStyle.SH_LineEdit_PasswordCharacter)
        option.text = chr(hint) * len(option.text)

class Ui_MainWindow(object):

    def __init__(self):
        self.column_order = ["uid", "password", "fa_secret", "cookie", "token", "profile_status","email", "email_password", "proxy", "status"]

        self.accounts = []
        self.base_url = "https://traodoisub.com"

        # New
        # self.threadpool = QThreadPool()
        self.threadpool = QThreadPool()
        # Set the maximum number of threads (workers)
        self.threadpool.setMaxThreadCount(4)
        print("Multithreading with maximum %d threads" % self.threadpool.maxThreadCount())

        # New
        self.check_mark_img = './images/check-mark-16.jpg'
        self.x_mark_img = './images/x-mark-16.jpg'

        # New - 1/1/2024
        self.selected_rows_count = 0
        self.running_threads = 0
        self.waiting_threads = 0
        self.completed_threads = 0

        # self.config_days_format = {
        #     'day_1': 'Day 1',
        #     'day_2': 'Day 2',
        #     'day_3': 'Day 3',
        #     'day_4': 'Day 4',
        #     'day_5': 'Day 5',
        #     'day_6': 'Day 6',
        #     'day_7': 'Day 7'
        # }

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")

        # Size of the main window
        MainWindow.resize(1690, 900)


        self.centralwidget = QtWidgets.QWidget(MainWindow)



        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(30, 10, 1500, 80))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.frame.setFont(font)
        self.frame.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        
        self.addAccountButton = QtWidgets.QPushButton(self.frame)
        self.addAccountButton.setGeometry(QtCore.QRect(20, 20, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.addAccountButton.setFont(font)
        self.addAccountButton.setObjectName("addAccountButton")

        self.addProxyButton = QtWidgets.QPushButton(self.frame)
        self.addProxyButton.setGeometry(QtCore.QRect(130, 20, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.addProxyButton.setFont(font)
        self.addProxyButton.setObjectName("addProxyButton")

        font = QtGui.QFont()
        font.setFamily("Yu Gothic")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.addProxyButton.setFont(font)
        self.addProxyButton.setObjectName("addProxyButton")



        

        # NEW
        self.saveProfiles = QtWidgets.QPushButton(self.frame)
        self.saveProfiles.setGeometry(QtCore.QRect(240, 20, 101, 31))
        self.saveProfiles.setObjectName("saveProfiles")
        self.importConfig = QtWidgets.QPushButton(self.frame)
        self.importConfig.setGeometry(QtCore.QRect(350, 20, 101, 31))
        self.importConfig.setObjectName("importConfig")

        self.feedAccounts = QtWidgets.QPushButton(self.frame)
        self.feedAccounts.setGeometry(QtCore.QRect(460, 20, 101, 31))
        self.feedAccounts.setObjectName("feedAccounts")

        self.exportData = QtWidgets.QPushButton(self.frame)
        self.exportData.setGeometry(QtCore.QRect(1400, 20, 101, 31))
        self.exportData.setObjectName("exportData")

        self.configDays = QtWidgets.QComboBox(self.frame)
        self.configDays.setGeometry(QtCore.QRect(570, 25, 68, 21))
        self.configDays.setObjectName("configDays")
        self.configDays.addItem("")
        self.configDays.addItem("")


        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        # 3rd and 4th parameters use to set width and height of the Table Widget
        self.tableWidget.setGeometry(QtCore.QRect(30, 130, 1616, 639))


        self.tableWidget.setObjectName("tableWidget")

        # Set column count
        self.tableWidget.setColumnCount(10)

        # self.tableWidget.setRowCount(2)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()

        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(9, item)

        # set all column width
        # self.set_column_width()


        # Set specified width for column "UID"
        self.tableWidget.setColumnWidth(0, 129)

        # Set specified width for column "Passwod"
        self.tableWidget.setColumnWidth(1, 129)

        # Set specified width for column "Fa_secret"
        self.tableWidget.setColumnWidth(2, 140)

        # Set specified width for column "Cookie"
        self.tableWidget.setColumnWidth(3, 200)

        # Set specified width for column "Token"
        self.tableWidget.setColumnWidth(4, 200)

        # Set specified width for column "Profile status"
        self.tableWidget.setColumnWidth(5, 95)

        # Set specified width for column "Email"
        self.tableWidget.setColumnWidth(6, 129)

        # Set specified width for column "Email_password"
        self.tableWidget.setColumnWidth(7, 129)

        # Set specified width for column "proxy"
        self.tableWidget.setColumnWidth(8, 119)

        # Set specified width for column "status"
        self.tableWidget.setColumnWidth(9, 326)


        # Set row height
        self.tableWidget.verticalHeader().setDefaultSectionSize(30)

        # Label "File:""
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 90, 741, 16))
        self.label.setObjectName("label")

        # Label "Total selected rows:"
        self.totalSelectedRows = QtWidgets.QLabel(self.centralwidget)
        self.totalSelectedRows.setGeometry(QtCore.QRect(30, 779, 741, 16))
        self.totalSelectedRows.setObjectName("totalSelectedRows")

        # Label "Total selected rows:"
        self.totalRunningRows = QtWidgets.QLabel(self.centralwidget)
        self.totalRunningRows.setGeometry(QtCore.QRect(30, 799, 741, 16))
        self.totalRunningRows.setObjectName("totalRunningRows")

        # Label "Total selected rows:"
        self.totalWaitingRows = QtWidgets.QLabel(self.centralwidget)
        self.totalWaitingRows.setGeometry(QtCore.QRect(30, 819, 741, 16))
        self.totalWaitingRows.setObjectName("totalWaitingRows")

        # Label "Total selected rows:"
        self.totalCompletedRows = QtWidgets.QLabel(self.centralwidget)
        self.totalCompletedRows.setGeometry(QtCore.QRect(30, 839, 741, 16))
        self.totalCompletedRows.setObjectName("totalCompletedRows")

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1064, 21))
        self.menubar.setObjectName("menubar")

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # NEW - Right click menu
        self.tableWidget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tableWidget.customContextMenuRequested.connect(self.showContextMenu)


        # new
        self.addAccountButton.clicked.connect(self.add_accounts_from_file)
        self.addProxyButton.clicked.connect(self.add_proxies_from_file)
        self.saveProfiles.clicked.connect(self.save_profiles)
        self.importConfig.clicked.connect(self.import_config_from_file)
        self.feedAccounts.clicked.connect(self.feed_accounts)

        self.exportData.clicked.connect(self.exportToJson)




        
        


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.addAccountButton.setText(_translate("MainWindow", "Thêm account"))
        self.addProxyButton.setText(_translate("MainWindow", "Thêm proxy"))

        self.saveProfiles.setText(_translate("MainWindow", "Tạo profile"))
        self.importConfig.setText(_translate("MainWindow", "Thêm config"))
        self.feedAccounts.setText(_translate("MainWindow", "Nuôi"))

        self.exportData.setText(_translate("MainWindow", "Xuất dữ liệu"))


        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "UID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Password"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Fa_secret"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Cookie"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Token"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Profile Status"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Email"))
        item = self.tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "Email_password"))

        item = self.tableWidget.horizontalHeaderItem(8)
        item.setText(_translate("MainWindow", "proxy"))

        item = self.tableWidget.horizontalHeaderItem(9)
        item.setText(_translate("MainWindow", "status"))

        __sortingEnabled = self.tableWidget.isSortingEnabled()
        self.tableWidget.setSortingEnabled(False)

        self.label.setText(_translate("MainWindow", "File:"))

        # NEW
        self.totalSelectedRows.setText(_translate("MainWindow", f"(*) Selected accounts: {self.selected_rows_count}"))
        self.totalRunningRows.setText(_translate("MainWindow", f"Running accounts: {self.running_threads}"))
        self.totalWaitingRows.setText(_translate("MainWindow", f"Waiting accounts: {self.waiting_threads}"))
        self.totalCompletedRows.setText(_translate("MainWindow", f"Completed accounts: {self.completed_threads}"))

        self.tableWidget.itemSelectionChanged.connect(self.updateSelectedRows)

    def open_dialog(self):
        dialog = QDialog()
        # Create layout
        layout = QVBoxLayout(self.centralwidget)

        # Create buttons
        button1 = QPushButton('Use Cookie', self.frame)
        button1.clicked.connect(self.save_profile_by_cookie)

        button2 = QPushButton('Use Profile', self.frame)
        button2.clicked.connect(self.save_profile_by_credentials)

        # Add buttons to layout
        layout.addWidget(button1)
        layout.addWidget(button2)

        dialog.setLayout(layout)

        button_pos = self.saveProfiles.pos()

        # Adjust the position of the dialog
        dialog.move(button_pos.x() + 145, button_pos.y() + 115)

        dialog.exec_()

    def save_profile_by_cookie(self):
        print('Save profile by cookie...')

    def save_profile_by_credentials(self):
        print('Save profile by user-pass...')

    def show_error_dialog(self, err_msg):
        # Create an error message box
        error_dialog = QMessageBox(self.centralwidget)
        error_dialog.setIcon(QMessageBox.Critical)
        error_dialog.setWindowTitle('Error')
        error_dialog.setText(err_msg)
        error_dialog.setStandardButtons(QMessageBox.Ok)

        # Show the error dialog
        error_dialog.exec_()



    def updateSelectedRows(self):
        # Get the list of selected rows
        self.selected_rows = set()
        for item in self.tableWidget.selectionModel().selectedRows():
            self.selected_rows.add(item.row())

        # Update the label with the total number of selected rows
        self.selected_rows_count = len(self.selected_rows)
        self.totalSelectedRows.setText(f'(*) Selected accounts: {len(self.selected_rows)}')


    def save_profiles(self):
        # Get selected items
        selected_rows = set(index.row() for index in self.tableWidget.selectionModel().selectedRows())
        selected_rows = list(selected_rows)

        

        if len(selected_rows) == 0:
            self.show_error_dialog(err_msg='No rows have been selected yet!')
        elif self.accounts[selected_rows[0]]['proxy'] == '':
            self.show_error_dialog(err_msg='No proxy added yet!')
        else:

            # Display the selected indices
            for row_i in selected_rows:

                facebook_login_credential = {
                    "uid": self.accounts[row_i]["uid"],
                    "password": self.accounts[row_i]["password"],
                    "fa_secret": self.accounts[row_i]["fa_secret"],
                }

                proxy = self.split_proxies(self.accounts[row_i]['proxy'])

                facebook_worker = SeleniumWorker(
                                                facebook_login_credential=facebook_login_credential,
                                                cookie_str=self.accounts[row_i]['cookie'],
                                                proxy=proxy, profile_id=self.accounts[row_i]['uid']
                                                )
                '''
                1/1/2024 -
                Connect signals.started and signals.finished 
                to the thread_start and thread_finished functions 
                to update the running_threads, waiting_threads 
                and completed_threads counters
                '''
                facebook_worker.signals.started.connect(self.thread_started)
                facebook_worker.signals.finished.connect(self.thread_finished)
                
                facebook_worker.signals.result.connect(lambda result, row=row_i: self.display_result(result, row))
                facebook_worker.signals.error.connect(lambda error, row=row_i: self.display_error(error, row))
                facebook_worker.signals.profile_status.connect(lambda status, row=row_i: self.change_profile_status(status, row))
                facebook_worker.signals.cookie.connect(lambda cookie, row=row_i: self.change_cookie(cookie, row))

                # Execute the worker in the thread pool
                self.threadpool.start(facebook_worker)

            
    def thread_started(self):
        self.running_threads += 1
        self.update_labels()

    def thread_finished(self):
        self.running_threads -= 1
        self.completed_threads += 1
        self.update_labels()        

    def update_labels(self):
        running_threads = self.running_threads
        waiting_threads = self.selected_rows_count - (self.running_threads + self.completed_threads)
        completed_threads = self.completed_threads

        self.totalRunningRows.setText(f"Running accounts: {running_threads}")
        self.totalWaitingRows.setText(f"Waiting accounts: {waiting_threads}")
        self.totalCompletedRows.setText(f"Completed accounts: {completed_threads}")

            
    def showContextMenu(self, pos):
        selected_rows = set(index.row() for index in self.tableWidget.selectionModel().selectedRows())

        if len(selected_rows) > 0:
            # Convert the widget coordinates to global coordinates
            global_pos = self.tableWidget.mapToGlobal(pos)

            # Create a context menu
            context_menu = QMenu(self.tableWidget)

            # Add title action (disabled and with a different font)
            title_action = context_menu.addAction("Actions:")
            title_action.setEnabled(False)
            title_font = title_action.font()
            title_font.setBold(True)
            title_action.setFont(title_font)
            title_action.setEnabled(False)

            # Add actions to the context menu
            action_save_profile = QAction("Test profile", self.tableWidget)

            # Connect actions to slots (you can implement your own slots)
            action_save_profile.triggered.connect(lambda: self.test_profile(selected_rows))

            # Add actions to the context menu
            context_menu.addAction(action_save_profile)

            # Show the context menu at the global position
            context_menu.exec_(global_pos)

    def test_profile(self, selected_rows):
        # print(f"Login and save profile for rows {', '.join(map(str, selected_rows))}")
        row_index = list(selected_rows)[0]
        try:
            proxy = self.split_proxies(self.accounts[row_index]['proxy'])

            profile_id = self.accounts[row_index]['uid']

            print('profile_id:', profile_id)

            if len(proxy) == 0:
                return self.show_error_dialog(err_msg='Cần thêm proxy để test profile!')

            driver = get_chromedriver(proxy=proxy, profile_id=profile_id)

            driver.get('https://www.facebook.com')

            time.sleep(200)

        except Exception as error:
            print('Có lỗi xảy ra khi test proxy:', error)

    def on_run_button_clicked(self, row, col):
        if len(self.accounts[row]['proxy']) == 0:
            self.changeCellValue(row=row, col=self.column_order.index('status'), newValue='Lỗi xảy ra: Hãy thêm proxies trước!')
        else:
            # _______________USE SELENIUM-FACEBOOK-WORKER_________________
            facebook_login_credential = {
                "uid": self.accounts[row]["face_uid"],
                "password": self.accounts[row]["face_pass"],
                "fa_secret": self.accounts[row]["face_secret"],
            }

            tds_login_credential = {
                'username': self.accounts[row]['tds_username'],
                'password': self.accounts[row]['tds_pass']
            }

            proxy = self.split_proxies(self.accounts[row]['proxy'])

            facebook_worker = SeleniumWorker(facebook_login_credential=facebook_login_credential,
                                            tds_login_credential=tds_login_credential,
                                            proxy=proxy
                                            )
            facebook_worker.signals.result.connect(lambda result: self.display_result(result, row))
            facebook_worker.signals.error.connect(lambda error: self.display_error(error, row))
            # Execute the worker in the thread pool
            self.threadpool.start(facebook_worker)
    
    def display_result(self, result, row):
        print('result:', result)
        print('row:', row)
        self.changeCellValue(row, self.column_order.index('status'), newValue=str(result))

    def display_error(self, error, row):
        print('error:', error)
        self.changeCellValue(row, self.column_order.index('status'), newValue=f'{error}')

    def change_profile_status(self, status, row):
      
        self.changeCellValue(row, self.column_order.index('profile_status'), newValue=status)


    def change_cookie(self, cookie, row):
        self.changeCellValue(row, self.column_order.index('cookie'), newValue=f'{cookie}')
        # change the account's cookie
        self.accounts[row]['cookie'] = cookie

    def changeCellValue(self, row, col, newValue):
        # newValue == 0 or 1 is corresponding change profile_status column
        if newValue == 0:
            new_item = QtWidgets.QLabel()
            pixmap = QPixmap(self.x_mark_img)
            new_item.setPixmap(pixmap)
            new_item.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.tableWidget.setCellWidget(row, col, new_item)
        elif newValue == 1:
            new_item = QtWidgets.QLabel()
            pixmap = QPixmap(self.check_mark_img)
            new_item.setPixmap(pixmap)
            new_item.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
            self.tableWidget.setCellWidget(row, col, new_item)
        else:
            # Create a new item with the desired value
            new_item = QtWidgets.QTableWidgetItem(newValue)

            # Set the new item for the specified cell
            self.tableWidget.setItem(row, col, new_item)


    def add_row(self, row_index, data):
        _translate = QtCore.QCoreApplication.translate
        for column_index, key in enumerate(self.column_order):
            value = data.get(key, "")

            if key == "uid":
                profile_id = value

            if key == "profile_status":
                # button = QPushButton(f"Run")
                # button.clicked.connect(lambda state, row=row_index, col=column_index: self.on_run_button_clicked(row, col))
                # self.tableWidget.setCellWidget(row_index, column_index, button)

                profile_path = f"./user-profiles/{profile_id}"
                if self.check_profiles_exists(profile_path=profile_path):
                    item = QtWidgets.QLabel()
                    pixmap = QPixmap(self.check_mark_img)
                    item.setPixmap(pixmap)
                    item.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)

                    self.tableWidget.setCellWidget(row_index, column_index, item)
            else:
                item = QtWidgets.QTableWidgetItem()
                item.setText(_translate("MainWindow", str(value)))
                self.tableWidget.setItem(row_index, column_index, item)

            


    def add_accounts_to_table(self, accounts):
        try:
            self.tableWidget.setRowCount(len(accounts))
            __sortingEnabled = self.tableWidget.isSortingEnabled()

            # Positions of field columns in the data table
            # column_order = ["tds_username", "tds_pass", "face_uid", "face_pass", "cookie", "token", "proxy", "user_agent", "tds_coins",  "status",  "action"]

            for row_index, account_data in enumerate(accounts):
                self.add_row(row_index, account_data)
            self.tableWidget.setSortingEnabled(__sortingEnabled)

            password_delegate = PasswordDelegate()

            # Set format (*) for columns 'password' and 'email_password' 
            self.tableWidget.setItemDelegateForColumn(self.column_order.index('password'), password_delegate)
            self.tableWidget.setItemDelegateForColumn(self.column_order.index('email_password'), password_delegate)    

            print('Added accounts successfully!')
        except Exception as error:
            print(error)

    def add_accounts_from_file(self):
        try:
            # Open file Dialog
            file_name, _ = QFileDialog.getOpenFileName(None, "Open File", "", "All Files (*);;Text Files (*.txt);;JSON Files (*.json)")
            
            # Read file and import to data table
            if file_name:
                self.label.setText(str(file_name))

                file = QFile(file_name)

                # Check the file extension
                file_extension = os.path.splitext(file_name)[1]

                if file_extension == '.txt':
                    if file.open(QFile.ReadOnly | QFile.Text):
                        stream = QTextStream(file)
                        facebook_accounts_content = stream.readAll()
                        # remove first and last space
                        facebook_accounts_content = facebook_accounts_content.strip()

                        account_lines = facebook_accounts_content.split('\n')

                        self.accounts = self.file_preprocessing(account_lines)

                        # Add data to the data table
                        self.add_accounts_to_table(self.accounts)
                        
                        file.close()
                    else:
                        print(f"Error opening file: {file.errorString()}")

                if file_extension == '.json':
                    if file.open(QFile.ReadOnly | QFile.Text):
                        stream = QTextStream(file)
                        fa_accounts_content = stream.readAll()

                        # Parse JSON data using QJsonDocument
                        document = QJsonDocument.fromJson(fa_accounts_content.encode('utf-8'))

                        # Convert QJsonDocument to Python dictionary
                        fa_accounts_dict : dict = json.loads(document.toJson(QJsonDocument.Compact).data().decode('utf-8'))

                        self.accounts = list(fa_accounts_dict.values())

                        # Add data to the data table
                        self.add_accounts_to_table(self.accounts)
                        
                        file.close()

                        

        except Exception as error:
            print(error)

    def file_preprocessing(self, account_lines: list):
        accounts = []
        for index, account_line in enumerate(account_lines):



            account_values = account_line.split('|')
            account_obj = {
                "uid": account_values[0], 
                "password": account_values[1],
                "fa_secret": account_values[2],
                "cookie": account_values[5],
                "token": account_values[6],
                "email": account_values[3],
                "email_password": account_values[4],
                "proxy": '',
                "status": '',
                }
            
            accounts.append(account_obj)
        return accounts
    

    def split_proxies(self, proxy_string:str)->dict:
        host, port, username, password = proxy_string.split(':')

        return {'host': host, 'port': port, 'username': username, 'password': password}
    
    def add_proxies_from_file(self):
        try:
            if self.tableWidget.rowCount() == 0:
                self.show_error_dialog(err_msg="Bạn phải thêm accounts trước!")
            else:
                # Open file Dialog
                file_name, _ = QFileDialog.getOpenFileName(None, "Open File", "", "All Files (*);;Text Files (*.txt)")
                    
                # Read file and import to data table
                if file_name:
                    self.label.setText(str(file_name))

                    file = QFile(file_name)

                    if file.open(QFile.ReadOnly | QFile.Text):
                        stream = QTextStream(file)
                        proxies_content = stream.readAll()
                        # remove first and last space
                        proxies_content = proxies_content.strip()

                        proxies_lines = proxies_content.split('\n')

                        # Add proxies to accounts
                        
                        count = 0
                        for account in self.accounts:
                            if count > len(proxies_lines) - 1:
                                # reset count to 0
                                count = 0

                            account["proxy"] = proxies_lines[count]
                            
                            # increase count
                            count += 1

                            
                        self.add_accounts_to_table(self.accounts)             

                        file.close()

                        print("Added proxies to accounts successfully!")
                    else:
                        print(f"Error opening file: {file.errorString()}")
        except Exception as error:
            print(error)

    def import_config_from_file(self):
        try:
            # Open file Dialog
            file_name, _ = QFileDialog.getOpenFileName(None, "Open File", "", "All Files (*);;Text Files (*.txt)")
            
            # Read file and import to data table
            if file_name:

                file = QFile(file_name)

                if file.open(QFile.ReadOnly | QFile.Text):
                    stream = QTextStream(file)
                    config_json_content = stream.readAll()
                    parsed_config_json = json.loads(config_json_content)

                    self.update_config_days(config_json=parsed_config_json)
                    
                    file.close()
                else:
                    print(f"Error opening file: {file.errorString()}")
        except Exception as error:
            print(error)


    def update_config_days(self, config_json):
        i = 0

        for key in config_json.keys():
            self.configDays.setItemText(i, key)
            i+=1
        
        
    def check_profiles_exists(self, profile_path):
        profile_path = Path(profile_path)

        if profile_path.exists() and profile_path.is_dir():
            return True
        
        return False
    

    def feed_accounts(self):
        selected_config_day = self.configDays.currentText()


        if len(selected_config_day) == 0:
            self.show_error_dialog(err_msg="You have not added the config yet!")
        else:
            print('config_day:', selected_config_day)

    
    def convert_data_to_dict(self):
        accounts_arr = self.accounts
        accounts_dict = {}

        for item in accounts_arr:
            key = item['uid']

            # remove item with key = status if it exist
            if item.get('status') is not None:
                item.pop('status')

            accounts_dict[key] = item

            

        return accounts_dict
    
    def exportToJson(self):

        if len(self.accounts) == 0:
            return self.show_error_dialog(err_msg="Chưa có dữ liệu nào để xuất file!")

        file_name, _ = QFileDialog.getSaveFileName(None, "Save JSON File", "", "JSON Files (*.json)")

        if file_name:
            accounts = self.convert_data_to_dict()

            with open(file_name, 'w') as json_file:
                json.dump(accounts, json_file, indent=4)
            print(f"Data exported to {file_name}")

    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
